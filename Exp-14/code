import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import OneHotEncoder
from sklearn.svm import SVR
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_percentage_error

# Importing Dataset
dataset = pd.read_csv("HousePricePrediction.csv")

# Drop ID column if it exists
if 'Id' in dataset.columns:
    dataset.drop(['Id'], axis=1, inplace=True)

# Separate categorical and numerical columns
categorical_cols = dataset.select_dtypes(include=['object']).columns
numerical_cols = dataset.select_dtypes(include=['number']).columns

print(f"Categorical columns: {list(categorical_cols)}")
print(f"Numerical columns: {list(numerical_cols)}")

# Handle missing values
dataset[numerical_cols] = dataset[numerical_cols].fillna(dataset[numerical_cols].mean())  # Fill numeric missing values with mean
dataset[categorical_cols] = dataset[categorical_cols].fillna(dataset[categorical_cols].mode().iloc[0])  # Fill categorical with mode

# One-Hot Encoding for Categorical Columns (Fixed sparse_output issue)
OH_encoder = OneHotEncoder(sparse_output=False, handle_unknown='ignore')  # âœ… Fixed here
OH_cols = pd.DataFrame(OH_encoder.fit_transform(dataset[categorical_cols]))

# Rename One-Hot encoded columns
OH_cols.columns = OH_encoder.get_feature_names_out()
OH_cols.index = dataset.index

# Drop original categorical columns and merge encoded columns
dataset = dataset.drop(categorical_cols, axis=1)
dataset = pd.concat([dataset, OH_cols], axis=1)

# Compute correlation only on numeric columns
plt.figure(figsize=(12, 6))
sns.heatmap(dataset.corr(), cmap='BrBG', fmt='.2f', linewidths=2, annot=True)
plt.title("Feature Correlation Heatmap")
plt.show()

# Prepare training data
X = dataset.drop(['SalePrice'], axis=1)
y = dataset['SalePrice']

X_train, X_valid, Y_train, Y_valid = train_test_split(X, y, test_size=0.2, random_state=42)

# Train SVR model
model_SVR = SVR()
model_SVR.fit(X_train, Y_train)
Y_pred_SVR = model_SVR.predict(X_valid)

# Train Linear Regression model
model_LR = LinearRegression()
model_LR.fit(X_train, Y_train)
Y_pred_LR = model_LR.predict(X_valid)

# Print evaluation metrics
print(f"SVR Mean Absolute Percentage Error: {mean_absolute_percentage_error(Y_valid, Y_pred_SVR):.4f}")
print(f"Linear Regression Mean Absolute Percentage Error: {mean_absolute_percentage_error(Y_valid, Y_pred_LR):.4f}")
